// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String    @id @default(cuid())
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  
  posts     Post[]    @relation("Post_author")
  createdAt DateTime? @default(now())
}

model Post {
  id       String  @id @default(cuid())
  title    String  @default("")
  content  String  @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author   User?   @relation("Post_author", fields: [authorId], references: [id])
  authorId String? @map("author")
  tags     Tag[]   @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}


model Route {
  id         String     @id @default(uuid())
  name       String
  employees  Employee[]
  localities Location[]
}

model Location {
  id             String       @id @default(uuid())
  name           String       @unique
  municipality   Municipality @relation(fields: [municipalityId], references: [id])
  municipalityId String
  route          Route?       @relation(fields: [routeId], references: [id])
  routeId        String?
  address        Address[]
}
model State {
  id             String         @id @default(uuid())
  name           String
  municipalities Municipality[]
}

model Municipality {
  id       String     @id @default(uuid())
  name     String
  state    State      @relation(fields: [stateId], references: [id])
  stateId  String
  location Location[]
}

model Expenses {
  id          String       @id @default(uuid())
  amountToPay Decimal
  dueDate     DateTime
  payedAt     DateTime
  employee    Employee     @relation(fields: [employeeId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  userId      String?
  employeeId  String
}

model ComissionPaymentConfiguration {
  id                 String             @id @default(uuid())
  loanTypeId         String
  amount             Decimal
  loanType           Loantype?          @relation(fields: [loanTypeId], references: [id])
  leadId             Employee?          @relation(fields: [employeeId], references: [id])
  employeeId         String? //When employee is is setter, this is to overwrite the default loan configuration
}

model Loantype {
  id                            String                          @id @default(uuid())
  name                          String
  weekDuration                  Int
  rate                          Float //percentege
  weeksToRenew                  Int
  overdueRate                   Float
  initialAmount                 Float                           @default(3000)
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  loan                          Loan[]
  comissionPaymentConfiguration ComissionPaymentConfiguration[]
}
model Phone {
  id             String        @id @default(uuid())
  number         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  personalDataId String?
  personalData   PersonalData? @relation(fields: [personalDataId], references: [id])
}

model Address {
  id             String        @id @default(uuid())
  street         String
  exteriorNumber String
  interiorNumber String?
  postalCode     String
  references     String?
  location       Location      @relation(fields: [locationId], references: [id])
  locationId     String
  personalData   PersonalData? @relation(fields: [personalDataId], references: [id])
  personalDataId String?
}

model Borrower {
  id                String       @id @default(uuid())
  email             String?      @unique
  personalData      PersonalData @relation(fields: [personalDataId], references: [id])
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  loanFinishedCount Int          @default(0)
  personalDataId    String
}

model PersonalData {
  id        String     @id @default(uuid())
  fullName  String
  firstName String
  lastName  String
  phones    Phone[]
  addresses Address[]
  birthDate DateTime
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  employee  Employee[]
  borrower  Borrower[]
  curp      String?    @unique
  loan      Loan?      @relation(fields: [loanId], references: [id]) //only when is an aval
  loanId    String? //only when is an aval
}

model Loan {
  id                      String         @id @default(uuid())
  status                  LoanState
  payments                LoanPayment[]
  weeklyPaymentAmount     Decimal       
  previousAmountGived     Decimal?      
  requestedAmount         Decimal       
  amountGived             Decimal        @default(0)
  amountToPay             Decimal        @default(0)
  paidAmount              Decimal        @default(0)
  pendingAmount           Decimal        @default(0)
  renovationProfitAmount  Decimal        @default(0)
  renovationPendingAmount Decimal        @default(0)
  baseProfitAmount        Decimal        @default(0)
  totalProfitAmount       Decimal        @default(0)
  loanType                Loantype       @relation(fields: [loanTypeId], references: [id])
  signDate                DateTime       @default(now())
  finishedDate            DateTime?
  firstPaymentDate        DateTime
  avals                   PersonalData[]

  loanLeadId String

  createdAt         DateTime            @default(now())
  grantor           Employee            @relation(fields: [grantorId], references: [id])
  updatedAt         DateTime            @updatedAt
  //contract          Contract            @relation(fields: [contractId], references: [id])
  contractId        String
  loanTypeId        String
  grantorId         String
  //paymentSchedule   PaymentSchedule[]
  commissionPayment CommissionPayment[]
  renovatedFromId   String?
  transaction       Transaction         @relation(fields: [transactionId], references: [id])
  transactionId     String              @unique
}

model LoanPayment {
  id                    String                  @id @default(uuid())
  amount                Decimal                
  profitAmount          Decimal                
  returnToCapital       Decimal                
  //percentage            Decimal                 @db.Decimal(100, 9)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  //paymentSchedules      PaymentSchedule[]
  loan                  Loan                    @relation(fields: [loanId], references: [id])
  loanId                String
  collector             Employee                @relation(fields: [collectorId], references: [id])
  collectorId           String
  leadPaymentReceived   LeadPaymentReceived?    @relation(fields: [leadPaymentReceivedId], references: [id])
  leadPaymentReceivedId String?
  transaction           Transaction             @relation(fields: [transactionId], references: [id])
  transactionId         String                  @unique
  //PaymentToDistribution PaymentDistribution[]
}

model Transaction {
  id                   String                    @id @default(uuid())
  amount               Decimal                  
  date                 DateTime                  @default(now())
  type                 TransactionType
  incomeSource         TransactionIncomeSource?
  expenseSource        TransactionExpenseSource?
  //state                TransactionRequestState   @default(PENDING)
  sourceAccount        Account?                  @relation("SourceAccount", fields: [sourceAccountId], references: [id])
  sourceAccountId      String?
  destinationAccount   Account?                  @relation("DestinationAccount", fields: [destinationAccountId], references: [id])
  destinationAccountId String?
  loan                 Loan?
  loanId               String?
  loanPayment          LoanPayment?
  loanPaymentId        String?
  createdAt            DateTime                  @default(now())
  updatedAt            DateTime                  @updatedAt

  @@index([sourceAccountId])
}

model CommissionPayment {
  id                String                  @id @default(uuid())
  amount            Decimal                
  //paymentSchedule   PaymentSchedule         @relation(fields: [paymentScheduleId], references: [id])
  loan              Loan?                   @relation(fields: [loanId], references: [id])
  employee          Employee                @relation(fields: [employeeId], references: [id])
  loanId            String?
  paymentScheduleId String
  employeeId        String //could be comissio for a loanLead or for a laison executive
  //status            CommissionPaymentStatus
}

enum EmployeesTypes {
  LIAISON_EXECUTIVE
  LOAN_LEAD
  INVESTMENT_DIRECTOR
  CASH_MANAGER
}

enum LeadPaymentTypes {
  PENDING_MONEY
  COMPENSATORY_PENDING_MONEY
}

model FalcoCompensatoryPayment {
  id                    String               @id @default(uuid())
  amount                Decimal             
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  leadPaymentReceived   LeadPaymentReceived? @relation(fields: [leadPaymentReceivedId], references: [id])
  leadPaymentReceivedId String?
}

model LeadPaymentReceived {
  id                        String                     @id @default(uuid())
  type                      LeadPaymentTypes
  expectedAmount            Decimal                   
  paidAmount                Decimal                   
  falco                     Decimal                   
  pendingFalcoAmount        Decimal                   
  falcoCompensatoryPayments FalcoCompensatoryPayment[]
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  leadId                    String
  agentId                   String
  payments                  LoanPayment[]
  agent                     Employee                   @relation("LeadPaymentsReceived_Agent", fields: [agentId], references: [id])
  lead                      Employee                   @relation("LeadPaymentsReceived_Lead", fields: [leadId], references: [id])
}

model Employee {
  id                            String                          @id @default(uuid())
  type                          EmployeesTypes
  personalData                  PersonalData                    @relation(fields: [personalDataId], references: [id])
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  loan                          Loan[]
  userId                        String                          @unique()
  loanPayment                   LoanPayment[]
  commissionPayment             CommissionPayment[]
  /* contractGrantor               Contract[]                      @relation("Contract_grantor")
  contractLoanLead              Contract[]                      @relation("Contract_loanLean") */
  expenses                      Expenses[]
  personalDataId                String
  amountGivedIncreased          Boolean                         @default(false)
  routes                        Route[]
  leadPaymentsReceivedLead      LeadPaymentReceived[]           @relation("LeadPaymentsReceived_Lead")
  leadPaymentReceivedAgent      LeadPaymentReceived[]           @relation("LeadPaymentsReceived_Agent")
  comissionPaymentConfiguration ComissionPaymentConfiguration[]
}

model Account {
  id                   String        @id @default(uuid())
  name                 String
  type                 AccountType
  amount               Decimal      
  transactions         Transaction[] @relation("SourceAccount")
  receivedTransactions Transaction[] @relation("DestinationAccount")
  updatedAt            DateTime      @updatedAt
  createdAt            DateTime      @default(now())
}  

enum AccountType {
  BANK
  OFFICE_CASH_FUND
  EMPLOYEE_CASH_FUND
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
  INVESTMENT
}

enum TransactionIncomeSource {
  LOAN_PAYMENT
  MONEY_INVESMENT
}

enum TransactionExpenseSource {
  VIATIC
  GASOLINE
  ACCOMMODATION
  NOMINA_SALARY
  EXTERNAL_SALARY
  VEHICULE_MAINTENANCE
  LOAN_GRANTED
  LOAN_PAYMENT_COMISSION
  LOAN_GRANTED_COMISSION
  LEAD_COMISSION
}

enum LoanState {
  APPROVED
  PAID_OUT
}

