# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  portfolioCleanups(where: PortfolioCleanupWhereInput! = {}, orderBy: [PortfolioCleanupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PortfolioCleanupWhereUniqueInput): [PortfolioCleanup!]
  portfolioCleanupsCount(where: PortfolioCleanupWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  role: StringNullableFilter
  portfolioCleanups: PortfolioCleanupManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input PortfolioCleanupManyRelationFilter {
  every: PortfolioCleanupWhereInput
  some: PortfolioCleanupWhereInput
  none: PortfolioCleanupWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  portfolioCleanups: PortfolioCleanupRelateToManyForUpdateInput
  createdAt: DateTime
}

input PortfolioCleanupRelateToManyForUpdateInput {
  disconnect: [PortfolioCleanupWhereUniqueInput!]
  set: [PortfolioCleanupWhereUniqueInput!]
  create: [PortfolioCleanupCreateInput!]
  connect: [PortfolioCleanupWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  portfolioCleanups: PortfolioCleanupRelateToManyForCreateInput
  createdAt: DateTime
}

input PortfolioCleanupRelateToManyForCreateInput {
  create: [PortfolioCleanupCreateInput!]
  connect: [PortfolioCleanupWhereUniqueInput!]
}

type Employee {
  id: ID!
  oldId: String
  routes: Route
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  personalData: PersonalData
  loan(where: LoanWhereInput! = {}, orderBy: [LoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanWhereUniqueInput): [Loan!]
  loanCount(where: LoanWhereInput! = {}): Int
  commissionPayment(where: CommissionPaymentWhereInput! = {}, orderBy: [CommissionPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommissionPaymentWhereUniqueInput): [CommissionPayment!]
  commissionPaymentCount(where: CommissionPaymentWhereInput! = {}): Int
  LeadManagedLoans(where: LoanWhereInput! = {}, orderBy: [LoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanWhereUniqueInput): [Loan!]
  LeadManagedLoansCount(where: LoanWhereInput! = {}): Int
  LeadPaymentReceivedLead(where: LeadPaymentReceivedWhereInput! = {}, orderBy: [LeadPaymentReceivedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LeadPaymentReceivedWhereUniqueInput): [LeadPaymentReceived!]
  LeadPaymentReceivedLeadCount(where: LeadPaymentReceivedWhereInput! = {}): Int
  leadPaymentsReceivedAgent(where: LeadPaymentReceivedWhereInput! = {}, orderBy: [LeadPaymentReceivedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LeadPaymentReceivedWhereUniqueInput): [LeadPaymentReceived!]
  leadPaymentsReceivedAgentCount(where: LeadPaymentReceivedWhereInput! = {}): Int
  type: String
}

input EmployeeWhereUniqueInput {
  id: ID
  oldId: String
}

input EmployeeWhereInput {
  AND: [EmployeeWhereInput!]
  OR: [EmployeeWhereInput!]
  NOT: [EmployeeWhereInput!]
  id: IDFilter
  oldId: StringNullableFilter
  routes: RouteWhereInput
  transactions: TransactionManyRelationFilter
  personalData: PersonalDataWhereInput
  loan: LoanManyRelationFilter
  commissionPayment: CommissionPaymentManyRelationFilter
  LeadManagedLoans: LoanManyRelationFilter
  LeadPaymentReceivedLead: LeadPaymentReceivedManyRelationFilter
  leadPaymentsReceivedAgent: LeadPaymentReceivedManyRelationFilter
  type: StringNullableFilter
}

input TransactionManyRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

input LoanManyRelationFilter {
  every: LoanWhereInput
  some: LoanWhereInput
  none: LoanWhereInput
}

input CommissionPaymentManyRelationFilter {
  every: CommissionPaymentWhereInput
  some: CommissionPaymentWhereInput
  none: CommissionPaymentWhereInput
}

input LeadPaymentReceivedManyRelationFilter {
  every: LeadPaymentReceivedWhereInput
  some: LeadPaymentReceivedWhereInput
  none: LeadPaymentReceivedWhereInput
}

input EmployeeOrderByInput {
  id: OrderDirection
  oldId: OrderDirection
  type: OrderDirection
}

input EmployeeUpdateInput {
  oldId: String
  routes: RouteRelateToOneForUpdateInput
  transactions: TransactionRelateToManyForUpdateInput
  personalData: PersonalDataRelateToOneForUpdateInput
  loan: LoanRelateToManyForUpdateInput
  commissionPayment: CommissionPaymentRelateToManyForUpdateInput
  LeadManagedLoans: LoanRelateToManyForUpdateInput
  LeadPaymentReceivedLead: LeadPaymentReceivedRelateToManyForUpdateInput
  leadPaymentsReceivedAgent: LeadPaymentReceivedRelateToManyForUpdateInput
  type: String
}

input RouteRelateToOneForUpdateInput {
  create: RouteCreateInput
  connect: RouteWhereUniqueInput
  disconnect: Boolean
}

input TransactionRelateToManyForUpdateInput {
  disconnect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  create: [TransactionCreateInput!]
  connect: [TransactionWhereUniqueInput!]
}

input PersonalDataRelateToOneForUpdateInput {
  create: PersonalDataCreateInput
  connect: PersonalDataWhereUniqueInput
  disconnect: Boolean
}

input LoanRelateToManyForUpdateInput {
  disconnect: [LoanWhereUniqueInput!]
  set: [LoanWhereUniqueInput!]
  create: [LoanCreateInput!]
  connect: [LoanWhereUniqueInput!]
}

input CommissionPaymentRelateToManyForUpdateInput {
  disconnect: [CommissionPaymentWhereUniqueInput!]
  set: [CommissionPaymentWhereUniqueInput!]
  create: [CommissionPaymentCreateInput!]
  connect: [CommissionPaymentWhereUniqueInput!]
}

input LeadPaymentReceivedRelateToManyForUpdateInput {
  disconnect: [LeadPaymentReceivedWhereUniqueInput!]
  set: [LeadPaymentReceivedWhereUniqueInput!]
  create: [LeadPaymentReceivedCreateInput!]
  connect: [LeadPaymentReceivedWhereUniqueInput!]
}

input EmployeeUpdateArgs {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateInput!
}

input EmployeeCreateInput {
  oldId: String
  routes: RouteRelateToOneForCreateInput
  transactions: TransactionRelateToManyForCreateInput
  personalData: PersonalDataRelateToOneForCreateInput
  loan: LoanRelateToManyForCreateInput
  commissionPayment: CommissionPaymentRelateToManyForCreateInput
  LeadManagedLoans: LoanRelateToManyForCreateInput
  LeadPaymentReceivedLead: LeadPaymentReceivedRelateToManyForCreateInput
  leadPaymentsReceivedAgent: LeadPaymentReceivedRelateToManyForCreateInput
  type: String
}

input RouteRelateToOneForCreateInput {
  create: RouteCreateInput
  connect: RouteWhereUniqueInput
}

input TransactionRelateToManyForCreateInput {
  create: [TransactionCreateInput!]
  connect: [TransactionWhereUniqueInput!]
}

input PersonalDataRelateToOneForCreateInput {
  create: PersonalDataCreateInput
  connect: PersonalDataWhereUniqueInput
}

input LoanRelateToManyForCreateInput {
  create: [LoanCreateInput!]
  connect: [LoanWhereUniqueInput!]
}

input CommissionPaymentRelateToManyForCreateInput {
  create: [CommissionPaymentCreateInput!]
  connect: [CommissionPaymentWhereUniqueInput!]
}

input LeadPaymentReceivedRelateToManyForCreateInput {
  create: [LeadPaymentReceivedCreateInput!]
  connect: [LeadPaymentReceivedWhereUniqueInput!]
}

type Route {
  id: ID!
  name: String
  employees(where: EmployeeWhereInput! = {}, orderBy: [EmployeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmployeeWhereUniqueInput): [Employee!]
  employeesCount(where: EmployeeWhereInput! = {}): Int
  localities(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  localitiesCount(where: LocationWhereInput! = {}): Int
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  portfolioCleanups(where: PortfolioCleanupWhereInput! = {}, orderBy: [PortfolioCleanupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PortfolioCleanupWhereUniqueInput): [PortfolioCleanup!]
  portfolioCleanupsCount(where: PortfolioCleanupWhereInput! = {}): Int
}

input RouteWhereUniqueInput {
  id: ID
}

input RouteWhereInput {
  AND: [RouteWhereInput!]
  OR: [RouteWhereInput!]
  NOT: [RouteWhereInput!]
  id: IDFilter
  name: StringFilter
  employees: EmployeeManyRelationFilter
  localities: LocationManyRelationFilter
  accounts: AccountManyRelationFilter
  transactions: TransactionManyRelationFilter
  portfolioCleanups: PortfolioCleanupManyRelationFilter
}

input EmployeeManyRelationFilter {
  every: EmployeeWhereInput
  some: EmployeeWhereInput
  none: EmployeeWhereInput
}

input LocationManyRelationFilter {
  every: LocationWhereInput
  some: LocationWhereInput
  none: LocationWhereInput
}

input AccountManyRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input RouteOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input RouteUpdateInput {
  name: String
  employees: EmployeeRelateToManyForUpdateInput
  localities: LocationRelateToManyForUpdateInput
  accounts: AccountRelateToManyForUpdateInput
  transactions: TransactionRelateToManyForUpdateInput
  portfolioCleanups: PortfolioCleanupRelateToManyForUpdateInput
}

input EmployeeRelateToManyForUpdateInput {
  disconnect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  create: [EmployeeCreateInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input LocationRelateToManyForUpdateInput {
  disconnect: [LocationWhereUniqueInput!]
  set: [LocationWhereUniqueInput!]
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input AccountRelateToManyForUpdateInput {
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input RouteUpdateArgs {
  where: RouteWhereUniqueInput!
  data: RouteUpdateInput!
}

input RouteCreateInput {
  name: String
  employees: EmployeeRelateToManyForCreateInput
  localities: LocationRelateToManyForCreateInput
  accounts: AccountRelateToManyForCreateInput
  transactions: TransactionRelateToManyForCreateInput
  portfolioCleanups: PortfolioCleanupRelateToManyForCreateInput
}

input EmployeeRelateToManyForCreateInput {
  create: [EmployeeCreateInput!]
  connect: [EmployeeWhereUniqueInput!]
}

input LocationRelateToManyForCreateInput {
  create: [LocationCreateInput!]
  connect: [LocationWhereUniqueInput!]
}

input AccountRelateToManyForCreateInput {
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

type Location {
  id: ID!
  name: String
  municipality: Municipality
  route: Route
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
}

input LocationWhereUniqueInput {
  id: ID
  name: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  municipality: MunicipalityWhereInput
  route: RouteWhereInput
  addresses: AddressManyRelationFilter
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input LocationUpdateInput {
  name: String
  municipality: MunicipalityRelateToOneForUpdateInput
  route: RouteRelateToOneForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
}

input MunicipalityRelateToOneForUpdateInput {
  create: MunicipalityCreateInput
  connect: MunicipalityWhereUniqueInput
  disconnect: Boolean
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
  municipality: MunicipalityRelateToOneForCreateInput
  route: RouteRelateToOneForCreateInput
  addresses: AddressRelateToManyForCreateInput
}

input MunicipalityRelateToOneForCreateInput {
  create: MunicipalityCreateInput
  connect: MunicipalityWhereUniqueInput
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

type State {
  id: ID!
  name: String
  municipalities(where: MunicipalityWhereInput! = {}, orderBy: [MunicipalityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MunicipalityWhereUniqueInput): [Municipality!]
  municipalitiesCount(where: MunicipalityWhereInput! = {}): Int
}

input StateWhereUniqueInput {
  id: ID
}

input StateWhereInput {
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  id: IDFilter
  name: StringFilter
  municipalities: MunicipalityManyRelationFilter
}

input MunicipalityManyRelationFilter {
  every: MunicipalityWhereInput
  some: MunicipalityWhereInput
  none: MunicipalityWhereInput
}

input StateOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StateUpdateInput {
  name: String
  municipalities: MunicipalityRelateToManyForUpdateInput
}

input MunicipalityRelateToManyForUpdateInput {
  disconnect: [MunicipalityWhereUniqueInput!]
  set: [MunicipalityWhereUniqueInput!]
  create: [MunicipalityCreateInput!]
  connect: [MunicipalityWhereUniqueInput!]
}

input StateUpdateArgs {
  where: StateWhereUniqueInput!
  data: StateUpdateInput!
}

input StateCreateInput {
  name: String
  municipalities: MunicipalityRelateToManyForCreateInput
}

input MunicipalityRelateToManyForCreateInput {
  create: [MunicipalityCreateInput!]
  connect: [MunicipalityWhereUniqueInput!]
}

type Municipality {
  id: ID!
  name: String
  state: State
  location(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationCount(where: LocationWhereInput! = {}): Int
}

input MunicipalityWhereUniqueInput {
  id: ID
}

input MunicipalityWhereInput {
  AND: [MunicipalityWhereInput!]
  OR: [MunicipalityWhereInput!]
  NOT: [MunicipalityWhereInput!]
  id: IDFilter
  name: StringFilter
  state: StateWhereInput
  location: LocationManyRelationFilter
}

input MunicipalityOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input MunicipalityUpdateInput {
  name: String
  state: StateRelateToOneForUpdateInput
  location: LocationRelateToManyForUpdateInput
}

input StateRelateToOneForUpdateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
  disconnect: Boolean
}

input MunicipalityUpdateArgs {
  where: MunicipalityWhereUniqueInput!
  data: MunicipalityUpdateInput!
}

input MunicipalityCreateInput {
  name: String
  state: StateRelateToOneForCreateInput
  location: LocationRelateToManyForCreateInput
}

input StateRelateToOneForCreateInput {
  create: StateCreateInput
  connect: StateWhereUniqueInput
}

type Loantype {
  id: ID!
  name: String
  weekDuration: Int
  rate: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  loan(where: LoanWhereInput! = {}, orderBy: [LoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanWhereUniqueInput): [Loan!]
  loanCount(where: LoanWhereInput! = {}): Int
}

scalar Decimal

input LoantypeWhereUniqueInput {
  id: ID
}

input LoantypeWhereInput {
  AND: [LoantypeWhereInput!]
  OR: [LoantypeWhereInput!]
  NOT: [LoantypeWhereInput!]
  id: IDFilter
  name: StringFilter
  weekDuration: IntNullableFilter
  rate: DecimalFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  loan: LoanManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DecimalFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalFilter
}

input LoantypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  weekDuration: OrderDirection
  rate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LoantypeUpdateInput {
  name: String
  weekDuration: Int
  rate: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  loan: LoanRelateToManyForUpdateInput
}

input LoantypeUpdateArgs {
  where: LoantypeWhereUniqueInput!
  data: LoantypeUpdateInput!
}

input LoantypeCreateInput {
  name: String
  weekDuration: Int
  rate: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  loan: LoanRelateToManyForCreateInput
}

type Phone {
  id: ID!
  number: String
  createdAt: DateTime
  updatedAt: DateTime
  personalData: PersonalData
}

input PhoneWhereUniqueInput {
  id: ID
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: IDFilter
  number: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  personalData: PersonalDataWhereInput
}

input PhoneOrderByInput {
  id: OrderDirection
  number: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhoneUpdateInput {
  number: String
  createdAt: DateTime
  updatedAt: DateTime
  personalData: PersonalDataRelateToOneForUpdateInput
}

input PhoneUpdateArgs {
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateInput!
}

input PhoneCreateInput {
  number: String
  createdAt: DateTime
  updatedAt: DateTime
  personalData: PersonalDataRelateToOneForCreateInput
}

type Address {
  id: ID!
  street: String
  exteriorNumber: String
  interiorNumber: String
  postalCode: String
  references: String
  location: Location
  personalData: PersonalData
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  street: StringFilter
  exteriorNumber: StringFilter
  interiorNumber: StringFilter
  postalCode: StringFilter
  references: StringFilter
  location: LocationWhereInput
  personalData: PersonalDataWhereInput
}

input AddressOrderByInput {
  id: OrderDirection
  street: OrderDirection
  exteriorNumber: OrderDirection
  interiorNumber: OrderDirection
  postalCode: OrderDirection
  references: OrderDirection
}

input AddressUpdateInput {
  street: String
  exteriorNumber: String
  interiorNumber: String
  postalCode: String
  references: String
  location: LocationRelateToOneForUpdateInput
  personalData: PersonalDataRelateToOneForUpdateInput
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  street: String
  exteriorNumber: String
  interiorNumber: String
  postalCode: String
  references: String
  location: LocationRelateToOneForCreateInput
  personalData: PersonalDataRelateToOneForCreateInput
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

type Borrower {
  id: ID!
  personalData: PersonalData
  createdAt: DateTime
  updatedAt: DateTime
  loanFinishedCount: Int
  loans(where: LoanWhereInput! = {}, orderBy: [LoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanWhereUniqueInput): [Loan!]
  loansCount(where: LoanWhereInput! = {}): Int
  fullName: String
}

input BorrowerWhereUniqueInput {
  id: ID
}

input BorrowerWhereInput {
  AND: [BorrowerWhereInput!]
  OR: [BorrowerWhereInput!]
  NOT: [BorrowerWhereInput!]
  id: IDFilter
  personalData: PersonalDataWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  loanFinishedCount: IntNullableFilter
  loans: LoanManyRelationFilter
}

input BorrowerOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  loanFinishedCount: OrderDirection
}

input BorrowerUpdateInput {
  personalData: PersonalDataRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  loanFinishedCount: Int
  loans: LoanRelateToManyForUpdateInput
}

input BorrowerUpdateArgs {
  where: BorrowerWhereUniqueInput!
  data: BorrowerUpdateInput!
}

input BorrowerCreateInput {
  personalData: PersonalDataRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  loanFinishedCount: Int
  loans: LoanRelateToManyForCreateInput
}

type PersonalData {
  id: ID!
  fullName: String
  clientCode: String
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  birthDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  employee: Employee
  borrower: Borrower
}

input PersonalDataWhereUniqueInput {
  id: ID
  clientCode: String
}

input PersonalDataWhereInput {
  AND: [PersonalDataWhereInput!]
  OR: [PersonalDataWhereInput!]
  NOT: [PersonalDataWhereInput!]
  id: IDFilter
  fullName: StringFilter
  clientCode: StringNullableFilter
  phones: PhoneManyRelationFilter
  addresses: AddressManyRelationFilter
  birthDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  employee: EmployeeWhereInput
  borrower: BorrowerWhereInput
}

input PhoneManyRelationFilter {
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input PersonalDataOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  clientCode: OrderDirection
  birthDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonalDataUpdateInput {
  fullName: String
  clientCode: String
  phones: PhoneRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  birthDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  employee: EmployeeRelateToOneForUpdateInput
  borrower: BorrowerRelateToOneForUpdateInput
}

input PhoneRelateToManyForUpdateInput {
  disconnect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  create: [PhoneCreateInput!]
  connect: [PhoneWhereUniqueInput!]
}

input EmployeeRelateToOneForUpdateInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
  disconnect: Boolean
}

input BorrowerRelateToOneForUpdateInput {
  create: BorrowerCreateInput
  connect: BorrowerWhereUniqueInput
  disconnect: Boolean
}

input PersonalDataUpdateArgs {
  where: PersonalDataWhereUniqueInput!
  data: PersonalDataUpdateInput!
}

input PersonalDataCreateInput {
  fullName: String
  clientCode: String
  phones: PhoneRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  birthDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  employee: EmployeeRelateToOneForCreateInput
  borrower: BorrowerRelateToOneForCreateInput
}

input PhoneRelateToManyForCreateInput {
  create: [PhoneCreateInput!]
  connect: [PhoneWhereUniqueInput!]
}

input EmployeeRelateToOneForCreateInput {
  create: EmployeeCreateInput
  connect: EmployeeWhereUniqueInput
}

input BorrowerRelateToOneForCreateInput {
  create: BorrowerCreateInput
  connect: BorrowerWhereUniqueInput
}

type Loan {
  id: ID!
  oldId: String
  payments(where: LoanPaymentWhereInput! = {}, orderBy: [LoanPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanPaymentWhereUniqueInput): [LoanPayment!]
  paymentsCount(where: LoanPaymentWhereInput! = {}): Int
  requestedAmount: Decimal
  amountGived: Decimal
  loantype: Loantype
  signDate: DateTime
  badDebtDate: DateTime
  profitAmount: Decimal
  avalName: String
  avalPhone: String
  grantor: Employee
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  lead: Employee
  snapshotLeadId: String
  snapshotLeadAssignedAt: DateTime
  borrower: Borrower
  previousLoan: Loan
  commissionPayment(where: CommissionPaymentWhereInput! = {}, orderBy: [CommissionPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommissionPaymentWhereUniqueInput): [CommissionPayment!]
  commissionPaymentCount(where: CommissionPaymentWhereInput! = {}): Int
  totalDebtAcquired: Decimal
  expectedWeeklyPayment: Decimal
  totalPaid: Decimal
  pendingAmountStored: Decimal
  comissionAmount: Decimal
  finishedDate: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  pendingProfitAmount: Float
  earnedProfit: Float
  totalPayedAmount: Float
  pendingAmount: Float
  weeklyPaymentAmount: Float
  amountToPay: Float
  status: String
  isLastLoan(where: Boolean): Boolean
  snapshotRouteId: String
  snapshotRouteName: String
  excludedByCleanup: PortfolioCleanup
}

input LoanWhereUniqueInput {
  id: ID
  oldId: String
}

input LoanWhereInput {
  AND: [LoanWhereInput!]
  OR: [LoanWhereInput!]
  NOT: [LoanWhereInput!]
  id: IDFilter
  oldId: StringNullableFilter
  payments: LoanPaymentManyRelationFilter
  requestedAmount: DecimalFilter
  amountGived: DecimalFilter
  loantype: LoantypeWhereInput
  signDate: DateTimeFilter
  badDebtDate: DateTimeNullableFilter
  profitAmount: DecimalNullableFilter
  avalName: StringFilter
  avalPhone: StringFilter
  grantor: EmployeeWhereInput
  transactions: TransactionManyRelationFilter
  lead: EmployeeWhereInput
  snapshotLeadId: StringNullableFilter
  snapshotLeadAssignedAt: DateTimeNullableFilter
  borrower: BorrowerWhereInput
  previousLoan: LoanWhereInput
  commissionPayment: CommissionPaymentManyRelationFilter
  totalDebtAcquired: DecimalNullableFilter
  expectedWeeklyPayment: DecimalNullableFilter
  totalPaid: DecimalNullableFilter
  pendingAmountStored: DecimalNullableFilter
  comissionAmount: DecimalNullableFilter
  finishedDate: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  status: StringNullableFilter
  snapshotRouteId: StringFilter
  snapshotRouteName: StringFilter
  excludedByCleanup: PortfolioCleanupWhereInput
}

input LoanPaymentManyRelationFilter {
  every: LoanPaymentWhereInput
  some: LoanPaymentWhereInput
  none: LoanPaymentWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DecimalNullableFilter {
  equals: Decimal
  in: [Decimal!]
  notIn: [Decimal!]
  lt: Decimal
  lte: Decimal
  gt: Decimal
  gte: Decimal
  not: DecimalNullableFilter
}

input LoanOrderByInput {
  id: OrderDirection
  oldId: OrderDirection
  requestedAmount: OrderDirection
  amountGived: OrderDirection
  signDate: OrderDirection
  badDebtDate: OrderDirection
  profitAmount: OrderDirection
  avalName: OrderDirection
  avalPhone: OrderDirection
  snapshotLeadId: OrderDirection
  snapshotLeadAssignedAt: OrderDirection
  totalDebtAcquired: OrderDirection
  expectedWeeklyPayment: OrderDirection
  totalPaid: OrderDirection
  pendingAmountStored: OrderDirection
  comissionAmount: OrderDirection
  finishedDate: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  snapshotRouteId: OrderDirection
  snapshotRouteName: OrderDirection
}

input LoanUpdateInput {
  oldId: String
  payments: LoanPaymentRelateToManyForUpdateInput
  requestedAmount: Decimal
  amountGived: Decimal
  loantype: LoantypeRelateToOneForUpdateInput
  signDate: DateTime
  badDebtDate: DateTime
  profitAmount: Decimal
  avalName: String
  avalPhone: String
  grantor: EmployeeRelateToOneForUpdateInput
  transactions: TransactionRelateToManyForUpdateInput
  lead: EmployeeRelateToOneForUpdateInput
  snapshotLeadId: String
  snapshotLeadAssignedAt: DateTime
  borrower: BorrowerRelateToOneForUpdateInput
  previousLoan: LoanRelateToOneForUpdateInput
  commissionPayment: CommissionPaymentRelateToManyForUpdateInput
  totalDebtAcquired: Decimal
  expectedWeeklyPayment: Decimal
  totalPaid: Decimal
  pendingAmountStored: Decimal
  comissionAmount: Decimal
  finishedDate: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  status: String
  snapshotRouteId: String
  snapshotRouteName: String
  excludedByCleanup: PortfolioCleanupRelateToOneForUpdateInput
}

input LoanPaymentRelateToManyForUpdateInput {
  disconnect: [LoanPaymentWhereUniqueInput!]
  set: [LoanPaymentWhereUniqueInput!]
  create: [LoanPaymentCreateInput!]
  connect: [LoanPaymentWhereUniqueInput!]
}

input LoantypeRelateToOneForUpdateInput {
  create: LoantypeCreateInput
  connect: LoantypeWhereUniqueInput
  disconnect: Boolean
}

input LoanRelateToOneForUpdateInput {
  create: LoanCreateInput
  connect: LoanWhereUniqueInput
  disconnect: Boolean
}

input PortfolioCleanupRelateToOneForUpdateInput {
  create: PortfolioCleanupCreateInput
  connect: PortfolioCleanupWhereUniqueInput
  disconnect: Boolean
}

input LoanUpdateArgs {
  where: LoanWhereUniqueInput!
  data: LoanUpdateInput!
}

input LoanCreateInput {
  oldId: String
  payments: LoanPaymentRelateToManyForCreateInput
  requestedAmount: Decimal
  amountGived: Decimal
  loantype: LoantypeRelateToOneForCreateInput
  signDate: DateTime
  badDebtDate: DateTime
  profitAmount: Decimal
  avalName: String
  avalPhone: String
  grantor: EmployeeRelateToOneForCreateInput
  transactions: TransactionRelateToManyForCreateInput
  lead: EmployeeRelateToOneForCreateInput
  snapshotLeadId: String
  snapshotLeadAssignedAt: DateTime
  borrower: BorrowerRelateToOneForCreateInput
  previousLoan: LoanRelateToOneForCreateInput
  commissionPayment: CommissionPaymentRelateToManyForCreateInput
  totalDebtAcquired: Decimal
  expectedWeeklyPayment: Decimal
  totalPaid: Decimal
  pendingAmountStored: Decimal
  comissionAmount: Decimal
  finishedDate: DateTime
  updatedAt: DateTime
  createdAt: DateTime
  status: String
  snapshotRouteId: String
  snapshotRouteName: String
  excludedByCleanup: PortfolioCleanupRelateToOneForCreateInput
}

input LoanPaymentRelateToManyForCreateInput {
  create: [LoanPaymentCreateInput!]
  connect: [LoanPaymentWhereUniqueInput!]
}

input LoantypeRelateToOneForCreateInput {
  create: LoantypeCreateInput
  connect: LoantypeWhereUniqueInput
}

input LoanRelateToOneForCreateInput {
  create: LoanCreateInput
  connect: LoanWhereUniqueInput
}

input PortfolioCleanupRelateToOneForCreateInput {
  create: PortfolioCleanupCreateInput
  connect: PortfolioCleanupWhereUniqueInput
}

type LoanPayment {
  id: ID!
  amount: Decimal
  comission: Decimal
  receivedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oldLoanId: String
  loan: Loan
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  type: String
  leadPaymentReceived: LeadPaymentReceived
  paymentMethod: String
}

input LoanPaymentWhereUniqueInput {
  id: ID
}

input LoanPaymentWhereInput {
  AND: [LoanPaymentWhereInput!]
  OR: [LoanPaymentWhereInput!]
  NOT: [LoanPaymentWhereInput!]
  id: IDFilter
  amount: DecimalNullableFilter
  comission: DecimalNullableFilter
  receivedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  oldLoanId: StringNullableFilter
  loan: LoanWhereInput
  transactions: TransactionManyRelationFilter
  type: StringNullableFilter
  leadPaymentReceived: LeadPaymentReceivedWhereInput
  paymentMethod: StringNullableFilter
}

input LoanPaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  comission: OrderDirection
  receivedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  oldLoanId: OrderDirection
  type: OrderDirection
  paymentMethod: OrderDirection
}

input LoanPaymentUpdateInput {
  amount: Decimal
  comission: Decimal
  receivedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oldLoanId: String
  loan: LoanRelateToOneForUpdateInput
  transactions: TransactionRelateToManyForUpdateInput
  type: String
  leadPaymentReceived: LeadPaymentReceivedRelateToOneForUpdateInput
  paymentMethod: String
}

input LeadPaymentReceivedRelateToOneForUpdateInput {
  create: LeadPaymentReceivedCreateInput
  connect: LeadPaymentReceivedWhereUniqueInput
  disconnect: Boolean
}

input LoanPaymentUpdateArgs {
  where: LoanPaymentWhereUniqueInput!
  data: LoanPaymentUpdateInput!
}

input LoanPaymentCreateInput {
  amount: Decimal
  comission: Decimal
  receivedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oldLoanId: String
  loan: LoanRelateToOneForCreateInput
  transactions: TransactionRelateToManyForCreateInput
  type: String
  leadPaymentReceived: LeadPaymentReceivedRelateToOneForCreateInput
  paymentMethod: String
}

input LeadPaymentReceivedRelateToOneForCreateInput {
  create: LeadPaymentReceivedCreateInput
  connect: LeadPaymentReceivedWhereUniqueInput
}

type Transaction {
  id: ID!
  amount: Decimal
  date: DateTime
  type: String
  incomeSource: String
  expenseSource: String
  description: String
  route: Route
  lead: Employee
  snapshotLeadId: String
  sourceAccount: Account
  destinationAccount: Account
  loan: Loan
  loanPayment: LoanPayment
  profitAmount: Decimal
  returnToCapital: Decimal
  createdAt: DateTime
  updatedAt: DateTime
}

input TransactionWhereUniqueInput {
  id: ID
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IDFilter
  amount: DecimalNullableFilter
  date: DateTimeNullableFilter
  type: StringNullableFilter
  incomeSource: StringNullableFilter
  expenseSource: StringNullableFilter
  description: StringFilter
  route: RouteWhereInput
  lead: EmployeeWhereInput
  snapshotLeadId: StringFilter
  sourceAccount: AccountWhereInput
  destinationAccount: AccountWhereInput
  loan: LoanWhereInput
  loanPayment: LoanPaymentWhereInput
  profitAmount: DecimalNullableFilter
  returnToCapital: DecimalNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TransactionOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  date: OrderDirection
  type: OrderDirection
  incomeSource: OrderDirection
  expenseSource: OrderDirection
  description: OrderDirection
  snapshotLeadId: OrderDirection
  profitAmount: OrderDirection
  returnToCapital: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TransactionUpdateInput {
  amount: Decimal
  date: DateTime
  type: String
  incomeSource: String
  expenseSource: String
  description: String
  route: RouteRelateToOneForUpdateInput
  lead: EmployeeRelateToOneForUpdateInput
  snapshotLeadId: String
  sourceAccount: AccountRelateToOneForUpdateInput
  destinationAccount: AccountRelateToOneForUpdateInput
  loan: LoanRelateToOneForUpdateInput
  loanPayment: LoanPaymentRelateToOneForUpdateInput
  profitAmount: Decimal
  returnToCapital: Decimal
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountRelateToOneForUpdateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
  disconnect: Boolean
}

input LoanPaymentRelateToOneForUpdateInput {
  create: LoanPaymentCreateInput
  connect: LoanPaymentWhereUniqueInput
  disconnect: Boolean
}

input TransactionUpdateArgs {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateInput!
}

input TransactionCreateInput {
  amount: Decimal
  date: DateTime
  type: String
  incomeSource: String
  expenseSource: String
  description: String
  route: RouteRelateToOneForCreateInput
  lead: EmployeeRelateToOneForCreateInput
  snapshotLeadId: String
  sourceAccount: AccountRelateToOneForCreateInput
  destinationAccount: AccountRelateToOneForCreateInput
  loan: LoanRelateToOneForCreateInput
  loanPayment: LoanPaymentRelateToOneForCreateInput
  profitAmount: Decimal
  returnToCapital: Decimal
  createdAt: DateTime
  updatedAt: DateTime
}

input AccountRelateToOneForCreateInput {
  create: AccountCreateInput
  connect: AccountWhereUniqueInput
}

input LoanPaymentRelateToOneForCreateInput {
  create: LoanPaymentCreateInput
  connect: LoanPaymentWhereUniqueInput
}

type CommissionPayment {
  id: ID!
  amount: Decimal
  loan: Loan
  employee: Employee
}

input CommissionPaymentWhereUniqueInput {
  id: ID
}

input CommissionPaymentWhereInput {
  AND: [CommissionPaymentWhereInput!]
  OR: [CommissionPaymentWhereInput!]
  NOT: [CommissionPaymentWhereInput!]
  id: IDFilter
  amount: DecimalNullableFilter
  loan: LoanWhereInput
  employee: EmployeeWhereInput
}

input CommissionPaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
}

input CommissionPaymentUpdateInput {
  amount: Decimal
  loan: LoanRelateToOneForUpdateInput
  employee: EmployeeRelateToOneForUpdateInput
}

input CommissionPaymentUpdateArgs {
  where: CommissionPaymentWhereUniqueInput!
  data: CommissionPaymentUpdateInput!
}

input CommissionPaymentCreateInput {
  amount: Decimal
  loan: LoanRelateToOneForCreateInput
  employee: EmployeeRelateToOneForCreateInput
}

type LeadPaymentType {
  id: ID!
  type: String
}

input LeadPaymentTypeWhereUniqueInput {
  id: ID
}

input LeadPaymentTypeWhereInput {
  AND: [LeadPaymentTypeWhereInput!]
  OR: [LeadPaymentTypeWhereInput!]
  NOT: [LeadPaymentTypeWhereInput!]
  id: IDFilter
  type: StringNullableFilter
}

input LeadPaymentTypeOrderByInput {
  id: OrderDirection
  type: OrderDirection
}

input LeadPaymentTypeUpdateInput {
  type: String
}

input LeadPaymentTypeUpdateArgs {
  where: LeadPaymentTypeWhereUniqueInput!
  data: LeadPaymentTypeUpdateInput!
}

input LeadPaymentTypeCreateInput {
  type: String
}

type FalcoCompensatoryPayment {
  id: ID!
  amount: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  leadPaymentReceived: LeadPaymentReceived
}

input FalcoCompensatoryPaymentWhereUniqueInput {
  id: ID
}

input FalcoCompensatoryPaymentWhereInput {
  AND: [FalcoCompensatoryPaymentWhereInput!]
  OR: [FalcoCompensatoryPaymentWhereInput!]
  NOT: [FalcoCompensatoryPaymentWhereInput!]
  id: IDFilter
  amount: DecimalNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  leadPaymentReceived: LeadPaymentReceivedWhereInput
}

input FalcoCompensatoryPaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FalcoCompensatoryPaymentUpdateInput {
  amount: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  leadPaymentReceived: LeadPaymentReceivedRelateToOneForUpdateInput
}

input FalcoCompensatoryPaymentUpdateArgs {
  where: FalcoCompensatoryPaymentWhereUniqueInput!
  data: FalcoCompensatoryPaymentUpdateInput!
}

input FalcoCompensatoryPaymentCreateInput {
  amount: Decimal
  createdAt: DateTime
  updatedAt: DateTime
  leadPaymentReceived: LeadPaymentReceivedRelateToOneForCreateInput
}

type LeadPaymentReceived {
  id: ID!
  expectedAmount: Decimal
  paidAmount: Decimal
  cashPaidAmount: Decimal
  bankPaidAmount: Decimal
  falcoAmount: Decimal
  paymentStatus: String
  createdAt: DateTime
  updatedAt: DateTime
  agent: Employee
  lead: Employee
  falcoCompensatoryPayments(where: FalcoCompensatoryPaymentWhereInput! = {}, orderBy: [FalcoCompensatoryPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FalcoCompensatoryPaymentWhereUniqueInput): [FalcoCompensatoryPayment!]
  falcoCompensatoryPaymentsCount(where: FalcoCompensatoryPaymentWhereInput! = {}): Int
  payments(where: LoanPaymentWhereInput! = {}, orderBy: [LoanPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanPaymentWhereUniqueInput): [LoanPayment!]
  paymentsCount(where: LoanPaymentWhereInput! = {}): Int
}

input LeadPaymentReceivedWhereUniqueInput {
  id: ID
}

input LeadPaymentReceivedWhereInput {
  AND: [LeadPaymentReceivedWhereInput!]
  OR: [LeadPaymentReceivedWhereInput!]
  NOT: [LeadPaymentReceivedWhereInput!]
  id: IDFilter
  expectedAmount: DecimalNullableFilter
  paidAmount: DecimalNullableFilter
  cashPaidAmount: DecimalNullableFilter
  bankPaidAmount: DecimalNullableFilter
  falcoAmount: DecimalNullableFilter
  paymentStatus: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  agent: EmployeeWhereInput
  lead: EmployeeWhereInput
  falcoCompensatoryPayments: FalcoCompensatoryPaymentManyRelationFilter
  payments: LoanPaymentManyRelationFilter
}

input FalcoCompensatoryPaymentManyRelationFilter {
  every: FalcoCompensatoryPaymentWhereInput
  some: FalcoCompensatoryPaymentWhereInput
  none: FalcoCompensatoryPaymentWhereInput
}

input LeadPaymentReceivedOrderByInput {
  id: OrderDirection
  expectedAmount: OrderDirection
  paidAmount: OrderDirection
  cashPaidAmount: OrderDirection
  bankPaidAmount: OrderDirection
  falcoAmount: OrderDirection
  paymentStatus: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LeadPaymentReceivedUpdateInput {
  expectedAmount: Decimal
  paidAmount: Decimal
  cashPaidAmount: Decimal
  bankPaidAmount: Decimal
  falcoAmount: Decimal
  paymentStatus: String
  createdAt: DateTime
  updatedAt: DateTime
  agent: EmployeeRelateToOneForUpdateInput
  lead: EmployeeRelateToOneForUpdateInput
  falcoCompensatoryPayments: FalcoCompensatoryPaymentRelateToManyForUpdateInput
  payments: LoanPaymentRelateToManyForUpdateInput
}

input FalcoCompensatoryPaymentRelateToManyForUpdateInput {
  disconnect: [FalcoCompensatoryPaymentWhereUniqueInput!]
  set: [FalcoCompensatoryPaymentWhereUniqueInput!]
  create: [FalcoCompensatoryPaymentCreateInput!]
  connect: [FalcoCompensatoryPaymentWhereUniqueInput!]
}

input LeadPaymentReceivedUpdateArgs {
  where: LeadPaymentReceivedWhereUniqueInput!
  data: LeadPaymentReceivedUpdateInput!
}

input LeadPaymentReceivedCreateInput {
  expectedAmount: Decimal
  paidAmount: Decimal
  cashPaidAmount: Decimal
  bankPaidAmount: Decimal
  falcoAmount: Decimal
  paymentStatus: String
  createdAt: DateTime
  updatedAt: DateTime
  agent: EmployeeRelateToOneForCreateInput
  lead: EmployeeRelateToOneForCreateInput
  falcoCompensatoryPayments: FalcoCompensatoryPaymentRelateToManyForCreateInput
  payments: LoanPaymentRelateToManyForCreateInput
}

input FalcoCompensatoryPaymentRelateToManyForCreateInput {
  create: [FalcoCompensatoryPaymentCreateInput!]
  connect: [FalcoCompensatoryPaymentWhereUniqueInput!]
}

type Account {
  id: ID!
  name: String
  type: String
  amount: Decimal
  accountBalance: Float
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  receivedTransactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  receivedTransactionsCount(where: TransactionWhereInput! = {}): Int
  route: Route
  updatedAt: DateTime
  createdAt: DateTime
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  name: StringFilter
  type: StringNullableFilter
  amount: DecimalNullableFilter
  transactions: TransactionManyRelationFilter
  receivedTransactions: TransactionManyRelationFilter
  route: RouteWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input AccountOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  amount: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input AccountUpdateInput {
  name: String
  type: String
  amount: Decimal
  transactions: TransactionRelateToManyForUpdateInput
  receivedTransactions: TransactionRelateToManyForUpdateInput
  route: RouteRelateToOneForUpdateInput
  updatedAt: DateTime
  createdAt: DateTime
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  name: String
  type: String
  amount: Decimal
  transactions: TransactionRelateToManyForCreateInput
  receivedTransactions: TransactionRelateToManyForCreateInput
  route: RouteRelateToOneForCreateInput
  updatedAt: DateTime
  createdAt: DateTime
}

type AuditLog {
  id: ID!
  operation: String
  modelName: String
  recordId: String
  userName: String
  userEmail: String
  userRole: String
  sessionId: String
  ipAddress: String
  userAgent: String
  previousValues: JSON
  newValues: JSON
  changedFields: JSON
  description: String
  metadata: JSON
  createdAt: DateTime
  user: User
}

input AuditLogWhereUniqueInput {
  id: ID
}

input AuditLogWhereInput {
  AND: [AuditLogWhereInput!]
  OR: [AuditLogWhereInput!]
  NOT: [AuditLogWhereInput!]
  id: IDFilter
  operation: StringNullableFilter
  modelName: StringFilter
  recordId: StringFilter
  userName: StringFilter
  userEmail: StringFilter
  userRole: StringFilter
  sessionId: StringFilter
  ipAddress: StringFilter
  userAgent: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  user: UserWhereInput
}

input AuditLogOrderByInput {
  id: OrderDirection
  operation: OrderDirection
  modelName: OrderDirection
  recordId: OrderDirection
  userName: OrderDirection
  userEmail: OrderDirection
  userRole: OrderDirection
  sessionId: OrderDirection
  ipAddress: OrderDirection
  userAgent: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input AuditLogUpdateInput {
  operation: String
  modelName: String
  recordId: String
  userName: String
  userEmail: String
  userRole: String
  sessionId: String
  ipAddress: String
  userAgent: String
  previousValues: JSON
  newValues: JSON
  changedFields: JSON
  description: String
  metadata: JSON
  createdAt: DateTime
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AuditLogUpdateArgs {
  where: AuditLogWhereUniqueInput!
  data: AuditLogUpdateInput!
}

input AuditLogCreateInput {
  operation: String
  modelName: String
  recordId: String
  userName: String
  userEmail: String
  userRole: String
  sessionId: String
  ipAddress: String
  userAgent: String
  previousValues: JSON
  newValues: JSON
  changedFields: JSON
  description: String
  metadata: JSON
  createdAt: DateTime
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type PortfolioCleanup {
  id: ID!
  name: String
  description: String
  cleanupDate: DateTime
  fromDate: DateTime
  toDate: DateTime
  excludedLoansCount: Int
  excludedAmount: Decimal
  route: Route
  executedBy: User
  loansExcluded(where: LoanWhereInput! = {}, orderBy: [LoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanWhereUniqueInput): [Loan!]
  loansExcludedCount(where: LoanWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input PortfolioCleanupWhereUniqueInput {
  id: ID
}

input PortfolioCleanupWhereInput {
  AND: [PortfolioCleanupWhereInput!]
  OR: [PortfolioCleanupWhereInput!]
  NOT: [PortfolioCleanupWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  cleanupDate: DateTimeFilter
  fromDate: DateTimeNullableFilter
  toDate: DateTimeNullableFilter
  excludedLoansCount: IntNullableFilter
  excludedAmount: DecimalNullableFilter
  route: RouteWhereInput
  executedBy: UserWhereInput
  loansExcluded: LoanManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PortfolioCleanupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  cleanupDate: OrderDirection
  fromDate: OrderDirection
  toDate: OrderDirection
  excludedLoansCount: OrderDirection
  excludedAmount: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PortfolioCleanupUpdateInput {
  name: String
  description: String
  cleanupDate: DateTime
  fromDate: DateTime
  toDate: DateTime
  excludedLoansCount: Int
  excludedAmount: Decimal
  route: RouteRelateToOneForUpdateInput
  executedBy: UserRelateToOneForUpdateInput
  loansExcluded: LoanRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PortfolioCleanupUpdateArgs {
  where: PortfolioCleanupWhereUniqueInput!
  data: PortfolioCleanupUpdateInput!
}

input PortfolioCleanupCreateInput {
  name: String
  description: String
  cleanupDate: DateTime
  fromDate: DateTime
  toDate: DateTime
  excludedLoansCount: Int
  excludedAmount: Decimal
  route: RouteRelateToOneForCreateInput
  executedBy: UserRelateToOneForCreateInput
  loansExcluded: LoanRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createEmployee(data: EmployeeCreateInput!): Employee
  createEmployees(data: [EmployeeCreateInput!]!): [Employee]
  updateEmployee(where: EmployeeWhereUniqueInput!, data: EmployeeUpdateInput!): Employee
  updateEmployees(data: [EmployeeUpdateArgs!]!): [Employee]
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteEmployees(where: [EmployeeWhereUniqueInput!]!): [Employee]
  createRoute(data: RouteCreateInput!): Route
  createRoutes(data: [RouteCreateInput!]!): [Route]
  updateRoute(where: RouteWhereUniqueInput!, data: RouteUpdateInput!): Route
  updateRoutes(data: [RouteUpdateArgs!]!): [Route]
  deleteRoute(where: RouteWhereUniqueInput!): Route
  deleteRoutes(where: [RouteWhereUniqueInput!]!): [Route]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(where: LocationWhereUniqueInput!, data: LocationUpdateInput!): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createState(data: StateCreateInput!): State
  createStates(data: [StateCreateInput!]!): [State]
  updateState(where: StateWhereUniqueInput!, data: StateUpdateInput!): State
  updateStates(data: [StateUpdateArgs!]!): [State]
  deleteState(where: StateWhereUniqueInput!): State
  deleteStates(where: [StateWhereUniqueInput!]!): [State]
  createMunicipality(data: MunicipalityCreateInput!): Municipality
  createMunicipalities(data: [MunicipalityCreateInput!]!): [Municipality]
  updateMunicipality(where: MunicipalityWhereUniqueInput!, data: MunicipalityUpdateInput!): Municipality
  updateMunicipalities(data: [MunicipalityUpdateArgs!]!): [Municipality]
  deleteMunicipality(where: MunicipalityWhereUniqueInput!): Municipality
  deleteMunicipalities(where: [MunicipalityWhereUniqueInput!]!): [Municipality]
  createLoantype(data: LoantypeCreateInput!): Loantype
  createLoantypes(data: [LoantypeCreateInput!]!): [Loantype]
  updateLoantype(where: LoantypeWhereUniqueInput!, data: LoantypeUpdateInput!): Loantype
  updateLoantypes(data: [LoantypeUpdateArgs!]!): [Loantype]
  deleteLoantype(where: LoantypeWhereUniqueInput!): Loantype
  deleteLoantypes(where: [LoantypeWhereUniqueInput!]!): [Loantype]
  createPhone(data: PhoneCreateInput!): Phone
  createPhones(data: [PhoneCreateInput!]!): [Phone]
  updatePhone(where: PhoneWhereUniqueInput!, data: PhoneUpdateInput!): Phone
  updatePhones(data: [PhoneUpdateArgs!]!): [Phone]
  deletePhone(where: PhoneWhereUniqueInput!): Phone
  deletePhones(where: [PhoneWhereUniqueInput!]!): [Phone]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createBorrower(data: BorrowerCreateInput!): Borrower
  createBorrowers(data: [BorrowerCreateInput!]!): [Borrower]
  updateBorrower(where: BorrowerWhereUniqueInput!, data: BorrowerUpdateInput!): Borrower
  updateBorrowers(data: [BorrowerUpdateArgs!]!): [Borrower]
  deleteBorrower(where: BorrowerWhereUniqueInput!): Borrower
  deleteBorrowers(where: [BorrowerWhereUniqueInput!]!): [Borrower]
  createPersonalData(data: PersonalDataCreateInput!): PersonalData
  createPersonalDatas(data: [PersonalDataCreateInput!]!): [PersonalData]
  updatePersonalData(where: PersonalDataWhereUniqueInput!, data: PersonalDataUpdateInput!): PersonalData
  updatePersonalDatas(data: [PersonalDataUpdateArgs!]!): [PersonalData]
  deletePersonalData(where: PersonalDataWhereUniqueInput!): PersonalData
  deletePersonalDatas(where: [PersonalDataWhereUniqueInput!]!): [PersonalData]
  createLoan(data: LoanCreateInput!): Loan
  createLoans(data: [LoanCreateInput!]!): [Loan]
  updateLoan(where: LoanWhereUniqueInput!, data: LoanUpdateInput!): Loan
  updateLoans(data: [LoanUpdateArgs!]!): [Loan]
  deleteLoan(where: LoanWhereUniqueInput!): Loan
  deleteLoans(where: [LoanWhereUniqueInput!]!): [Loan]
  createLoanPayment(data: LoanPaymentCreateInput!): LoanPayment
  createLoanPayments(data: [LoanPaymentCreateInput!]!): [LoanPayment]
  updateLoanPayment(where: LoanPaymentWhereUniqueInput!, data: LoanPaymentUpdateInput!): LoanPayment
  updateLoanPayments(data: [LoanPaymentUpdateArgs!]!): [LoanPayment]
  deleteLoanPayment(where: LoanPaymentWhereUniqueInput!): LoanPayment
  deleteLoanPayments(where: [LoanPaymentWhereUniqueInput!]!): [LoanPayment]
  createTransaction(data: TransactionCreateInput!): Transaction
  createTransactions(data: [TransactionCreateInput!]!): [Transaction]
  updateTransaction(where: TransactionWhereUniqueInput!, data: TransactionUpdateInput!): Transaction
  updateTransactions(data: [TransactionUpdateArgs!]!): [Transaction]
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteTransactions(where: [TransactionWhereUniqueInput!]!): [Transaction]
  createCommissionPayment(data: CommissionPaymentCreateInput!): CommissionPayment
  createCommissionPayments(data: [CommissionPaymentCreateInput!]!): [CommissionPayment]
  updateCommissionPayment(where: CommissionPaymentWhereUniqueInput!, data: CommissionPaymentUpdateInput!): CommissionPayment
  updateCommissionPayments(data: [CommissionPaymentUpdateArgs!]!): [CommissionPayment]
  deleteCommissionPayment(where: CommissionPaymentWhereUniqueInput!): CommissionPayment
  deleteCommissionPayments(where: [CommissionPaymentWhereUniqueInput!]!): [CommissionPayment]
  createLeadPaymentType(data: LeadPaymentTypeCreateInput!): LeadPaymentType
  createLeadPaymentTypes(data: [LeadPaymentTypeCreateInput!]!): [LeadPaymentType]
  updateLeadPaymentType(where: LeadPaymentTypeWhereUniqueInput!, data: LeadPaymentTypeUpdateInput!): LeadPaymentType
  updateLeadPaymentTypes(data: [LeadPaymentTypeUpdateArgs!]!): [LeadPaymentType]
  deleteLeadPaymentType(where: LeadPaymentTypeWhereUniqueInput!): LeadPaymentType
  deleteLeadPaymentTypes(where: [LeadPaymentTypeWhereUniqueInput!]!): [LeadPaymentType]
  createFalcoCompensatoryPayment(data: FalcoCompensatoryPaymentCreateInput!): FalcoCompensatoryPayment
  createFalcoCompensatoryPayments(data: [FalcoCompensatoryPaymentCreateInput!]!): [FalcoCompensatoryPayment]
  updateFalcoCompensatoryPayment(where: FalcoCompensatoryPaymentWhereUniqueInput!, data: FalcoCompensatoryPaymentUpdateInput!): FalcoCompensatoryPayment
  updateFalcoCompensatoryPayments(data: [FalcoCompensatoryPaymentUpdateArgs!]!): [FalcoCompensatoryPayment]
  deleteFalcoCompensatoryPayment(where: FalcoCompensatoryPaymentWhereUniqueInput!): FalcoCompensatoryPayment
  deleteFalcoCompensatoryPayments(where: [FalcoCompensatoryPaymentWhereUniqueInput!]!): [FalcoCompensatoryPayment]
  createLeadPaymentReceived(data: LeadPaymentReceivedCreateInput!): LeadPaymentReceived
  createLeadPaymentReceiveds(data: [LeadPaymentReceivedCreateInput!]!): [LeadPaymentReceived]
  updateLeadPaymentReceived(where: LeadPaymentReceivedWhereUniqueInput!, data: LeadPaymentReceivedUpdateInput!): LeadPaymentReceived
  updateLeadPaymentReceiveds(data: [LeadPaymentReceivedUpdateArgs!]!): [LeadPaymentReceived]
  deleteLeadPaymentReceived(where: LeadPaymentReceivedWhereUniqueInput!): LeadPaymentReceived
  deleteLeadPaymentReceiveds(where: [LeadPaymentReceivedWhereUniqueInput!]!): [LeadPaymentReceived]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createAuditLog(data: AuditLogCreateInput!): AuditLog
  createAuditLogs(data: [AuditLogCreateInput!]!): [AuditLog]
  updateAuditLog(where: AuditLogWhereUniqueInput!, data: AuditLogUpdateInput!): AuditLog
  updateAuditLogs(data: [AuditLogUpdateArgs!]!): [AuditLog]
  deleteAuditLog(where: AuditLogWhereUniqueInput!): AuditLog
  deleteAuditLogs(where: [AuditLogWhereUniqueInput!]!): [AuditLog]
  createPortfolioCleanup(data: PortfolioCleanupCreateInput!): PortfolioCleanup
  createPortfolioCleanups(data: [PortfolioCleanupCreateInput!]!): [PortfolioCleanup]
  updatePortfolioCleanup(where: PortfolioCleanupWhereUniqueInput!, data: PortfolioCleanupUpdateInput!): PortfolioCleanup
  updatePortfolioCleanups(data: [PortfolioCleanupUpdateArgs!]!): [PortfolioCleanup]
  deletePortfolioCleanup(where: PortfolioCleanupWhereUniqueInput!): PortfolioCleanup
  deletePortfolioCleanups(where: [PortfolioCleanupWhereUniqueInput!]!): [PortfolioCleanup]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  createCustomLeadPaymentReceived(expectedAmount: Float!, cashPaidAmount: Float, bankPaidAmount: Float, falcoAmount: Float, agentId: ID!, leadId: ID!, paymentDate: String!, payments: [PaymentInput!]!): CustomLeadPaymentReceived!
  updateCustomLeadPaymentReceived(id: ID!, expectedAmount: Float!, cashPaidAmount: Float, bankPaidAmount: Float, falcoAmount: Float, paymentDate: String!, payments: [PaymentInput!]!): CustomLeadPaymentReceived!
  createPortfolioCleanupAndExcludeLoans(name: String!, description: String, cleanupDate: String!, fromDate: String, toDate: String, routeId: String!, excludedLoanIds: [String!]): JSON!
  createBulkPortfolioCleanup(name: String!, description: String, cleanupDate: String!, routeId: String!, fromDate: String!, toDate: String!, weeksWithoutPaymentThreshold: Int): JSON!
}

type CustomLeadPaymentReceived {
  id: ID!
  expectedAmount: Float!
  paidAmount: Float!
  cashPaidAmount: Float!
  bankPaidAmount: Float!
  falcoAmount: Float!
  paymentStatus: String!
  agentId: ID!
  leadId: ID!
  paymentDate: String!
  payments: [Payment!]!
}

type Payment {
  id: ID!
  amount: Float!
  comission: Float!
  loanId: String!
  type: String!
  paymentMethod: String!
}

input PaymentInput {
  amount: Float!
  comission: Float!
  loanId: String!
  type: String!
  paymentMethod: String!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  employee(where: EmployeeWhereUniqueInput!): Employee
  employees(where: EmployeeWhereInput! = {}, orderBy: [EmployeeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmployeeWhereUniqueInput): [Employee!]
  employeesCount(where: EmployeeWhereInput! = {}): Int
  route(where: RouteWhereUniqueInput!): Route
  routes(where: RouteWhereInput! = {}, orderBy: [RouteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RouteWhereUniqueInput): [Route!]
  routesCount(where: RouteWhereInput! = {}): Int
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput! = {}, orderBy: [LocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LocationWhereUniqueInput): [Location!]
  locationsCount(where: LocationWhereInput! = {}): Int
  state(where: StateWhereUniqueInput!): State
  states(where: StateWhereInput! = {}, orderBy: [StateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StateWhereUniqueInput): [State!]
  statesCount(where: StateWhereInput! = {}): Int
  municipality(where: MunicipalityWhereUniqueInput!): Municipality
  municipalities(where: MunicipalityWhereInput! = {}, orderBy: [MunicipalityOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MunicipalityWhereUniqueInput): [Municipality!]
  municipalitiesCount(where: MunicipalityWhereInput! = {}): Int
  loantype(where: LoantypeWhereUniqueInput!): Loantype
  loantypes(where: LoantypeWhereInput! = {}, orderBy: [LoantypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoantypeWhereUniqueInput): [Loantype!]
  loantypesCount(where: LoantypeWhereInput! = {}): Int
  phone(where: PhoneWhereUniqueInput!): Phone
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  borrower(where: BorrowerWhereUniqueInput!): Borrower
  borrowers(where: BorrowerWhereInput! = {}, orderBy: [BorrowerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BorrowerWhereUniqueInput): [Borrower!]
  borrowersCount(where: BorrowerWhereInput! = {}): Int
  personalData(where: PersonalDataWhereUniqueInput!): PersonalData
  personalDatas(where: PersonalDataWhereInput! = {}, orderBy: [PersonalDataOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonalDataWhereUniqueInput): [PersonalData!]
  personalDatasCount(where: PersonalDataWhereInput! = {}): Int
  loan(where: LoanWhereUniqueInput!): Loan
  loans(where: LoanWhereInput! = {}, orderBy: [LoanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanWhereUniqueInput): [Loan!]
  loansCount(where: LoanWhereInput! = {}): Int
  loanPayment(where: LoanPaymentWhereUniqueInput!): LoanPayment
  loanPayments(where: LoanPaymentWhereInput! = {}, orderBy: [LoanPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LoanPaymentWhereUniqueInput): [LoanPayment!]
  loanPaymentsCount(where: LoanPaymentWhereInput! = {}): Int
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput! = {}, orderBy: [TransactionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TransactionWhereUniqueInput): [Transaction!]
  transactionsCount(where: TransactionWhereInput! = {}): Int
  commissionPayment(where: CommissionPaymentWhereUniqueInput!): CommissionPayment
  commissionPayments(where: CommissionPaymentWhereInput! = {}, orderBy: [CommissionPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommissionPaymentWhereUniqueInput): [CommissionPayment!]
  commissionPaymentsCount(where: CommissionPaymentWhereInput! = {}): Int
  leadPaymentType(where: LeadPaymentTypeWhereUniqueInput!): LeadPaymentType
  leadPaymentTypes(where: LeadPaymentTypeWhereInput! = {}, orderBy: [LeadPaymentTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LeadPaymentTypeWhereUniqueInput): [LeadPaymentType!]
  leadPaymentTypesCount(where: LeadPaymentTypeWhereInput! = {}): Int
  falcoCompensatoryPayment(where: FalcoCompensatoryPaymentWhereUniqueInput!): FalcoCompensatoryPayment
  falcoCompensatoryPayments(where: FalcoCompensatoryPaymentWhereInput! = {}, orderBy: [FalcoCompensatoryPaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FalcoCompensatoryPaymentWhereUniqueInput): [FalcoCompensatoryPayment!]
  falcoCompensatoryPaymentsCount(where: FalcoCompensatoryPaymentWhereInput! = {}): Int
  leadPaymentReceived(where: LeadPaymentReceivedWhereUniqueInput!): LeadPaymentReceived
  leadPaymentReceiveds(where: LeadPaymentReceivedWhereInput! = {}, orderBy: [LeadPaymentReceivedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LeadPaymentReceivedWhereUniqueInput): [LeadPaymentReceived!]
  leadPaymentReceivedsCount(where: LeadPaymentReceivedWhereInput! = {}): Int
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
  auditLog(where: AuditLogWhereUniqueInput!): AuditLog
  auditLogs(where: AuditLogWhereInput! = {}, orderBy: [AuditLogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuditLogWhereUniqueInput): [AuditLog!]
  auditLogsCount(where: AuditLogWhereInput! = {}): Int
  portfolioCleanup(where: PortfolioCleanupWhereUniqueInput!): PortfolioCleanup
  portfolioCleanups(where: PortfolioCleanupWhereInput! = {}, orderBy: [PortfolioCleanupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PortfolioCleanupWhereUniqueInput): [PortfolioCleanup!]
  portfolioCleanupsCount(where: PortfolioCleanupWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  getTransactionsSummary(startDate: String!, endDate: String!): [TransactionSummary!]!
  getMonthlyResume(routeId: String!, year: Int!): JSON!
  getLoansReport(routeId: String!, year: Int!, month: Int!): JSON!
  getActiveLoansReport(routeId: String!, year: Int!, month: Int!, useActiveWeeks: Boolean!, excludeCVAfterMonth: Int, excludeCVAfterYear: Int): JSON!
  getFinancialReport(routeId: String!, year: Int!): JSON!
  getCartera(routeId: String!, weeksWithoutPayment: Int!, includeBadDebt: Boolean!, analysisMonth: String, analysisYear: Int, includeOverdue: Boolean!, includeOverdrawn: Boolean!): JSON!
  searchClients(searchTerm: String!, routeId: String, locationId: String, limit: Int = 20): [JSON!]!
  getClientHistory(clientId: String!, routeId: String, locationId: String): JSON!
  getPortfolioCleanups(routeId: String!, year: Int!, month: Int!): JSON!
  previewBulkPortfolioCleanup(routeId: String!, fromDate: String!, toDate: String!, weeksWithoutPaymentThreshold: Int): JSON!
}

type TransactionSummary {
  date: String!
  locality: String!
  abono: Float!
  credito: Float!
  viatic: Float!
  gasoline: Float!
  accommodation: Float!
  nominaSalary: Float!
  externalSalary: Float!
  vehiculeMaintenance: Float!
  loanGranted: Float!
  loanPaymentComission: Float!
  loanGrantedComission: Float!
  leadComission: Float!
  moneyInvestment: Float!
  otro: Float!
  balance: Float!
  profit: Float!
  cashBalance: Float!
  bankBalance: Float!
  cashAbono: Float!
  bankAbono: Float!
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
