// Welcome to Keystone!
//
// This file is what Keystone uses as the entry-point to your headless backend
//
// Keystone imports the default export of this file, expecting a Keystone configuration object
//   you can find out more at https://keystonejs.com/docs/apis/config

import { config } from '@keystone-6/core'
import { PrismaClient } from '@prisma/client';

// to keep this file tidy, we define our schema in a different file
import { lists } from './schema'

// authentication is configured separately here too, but you might move this elsewhere
// when you write your list-level access control functions, as they typically rely on session data
import { withAuth, session } from './auth'
import dotenv from 'dotenv';
import express, { Request, Response } from 'express';
import PDFDocument from 'pdfkit';
import { extendGraphqlSchema } from './graphql/extendGraphqlSchema';
import { extendExpressApp } from './keystone-extensions.js';

// Declare global types
declare global {
  var prisma: PrismaClient | undefined;
}

// Load environment variables from .env file
dotenv.config();

// Validate required environment variables
const requiredEnvVars = ['DATABASE_URL', 'SESSION_SECRET'];
const missingEnvVars = requiredEnvVars.filter(envVar => !process.env[envVar]);

if (missingEnvVars.length > 0) {
  console.error('‚ùå Error: Missing required environment variables:');
  missingEnvVars.forEach(envVar => console.error(`   - ${envVar}`));
  console.error('\nüí° Please set these variables in your .env file or deployment environment');
  process.exit(1);
}

// Validate DATABASE_URL format for PostgreSQL
if (!process.env.DATABASE_URL?.startsWith('postgresql://') && !process.env.DATABASE_URL?.startsWith('postgres://')) {
  console.error('‚ùå Error: DATABASE_URL must be a valid PostgreSQL connection string');
  console.error('   Example: postgresql://username:password@hostname:5432/database_name');
  process.exit(1);
}

console.log('‚úÖ Environment variables validated successfully');
console.log(`üöÄ Starting Keystone in ${process.env.NODE_ENV || 'development'} mode`);
// Comentado temporalmente - no funciona con Keystone
// const app = express();
// ... endpoints comentados temporalmente

// Initialize Prisma client with proper typing
let prisma: PrismaClient;

if (typeof global.prisma === 'undefined') {
  global.prisma = new PrismaClient({
    log: ['error'],
  });
}

prisma = global.prisma;
export { prisma };

export default withAuth(
  config({
    db: {
      provider: 'postgresql',
      url: process.env.DATABASE_URL,
      enableLogging: false,
    },
    lists,
    session,
    graphql: {
      extendGraphqlSchema: combinedGraphqlSchema,
    },
    ui: {
      isAccessAllowed: (context) => !!context.session?.data,
    },
    server: {
      port: 3000,
      cors: {
        origin: ['http://localhost:3000'],
        credentials: true,
      },
      extendExpressApp: (app) => {
        // Servir archivos est√°ticos desde la carpeta public
        app.use(express.static('public'));
        // Llamar a la funci√≥n extendExpressApp original
        extendExpressApp(app);
      },
    },

  })
);
